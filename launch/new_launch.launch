<launch>
  <!-- Starting Gazebo simulation -->
  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="rviz_config" default="$(find plug_test)/rviz/config.rviz"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <include file="$(find yolov5_ros)/launch/yolov5.launch">
    <arg name="weights" value="$(find plug_test)/93_best_accuracy_latest.pt" />
    <arg name="input_image_topic" value="/camera/color/image_raw" />
  </include>

  <!-- Load the URDF's into the ROS Parameter Server -->
  <!-- <param name="robot_description"
    command="$(find xacro)/xacro '$(find plug_test)/urdf/camera.xacro'" /> -->

  <param name="plug_desc" command="$(find xacro)/xacro '$(find plug_test)/urdf/plug_socket.xacro'" />

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <!--<node name="camera_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model main_camera -param robot_description -x 0 -y 0 -z 0.85" />-->

  <!-- Spawn kinect camera -->
  <node name="kinect_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-sdf -database kinect -model kinect_cam -x 0 -y 0 -z 0.5" />

  <!-- Spawn plug model -->
  <node name="plug_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model ccs2plug -param plug_desc -x 1.2 -y 0 -z 0.85 -R 1.57 -P 0 -Y -1.57" />
<!-- z=0.5-1.2 y= -0.5 - 0.5  x=1-1.4 -->
  
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rviz_config)" />

  <!-- <node name="test_node" pkg="plug_test" type="test_node" output="screen"/> -->
  <!-- <node name="py_node" pkg="plug_test" type="py_node" output="screen"/> -->
  <node name="pixel_to_coords_service" pkg="plug_test" type="get_point_from_pixel.py" output="screen" />

  <node name="static_tf_publisher" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0 camera_link map 100" />
</launch>
